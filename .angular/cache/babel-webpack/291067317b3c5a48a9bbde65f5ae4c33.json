{"ast":null,"code":"import alignPoint from './align-point';\nimport collision from './collision';\n\nconst fit = function (position, size, viewPortSize) {\n  let output = 0;\n\n  if (position + size > viewPortSize) {\n    output = viewPortSize - (position + size);\n  }\n\n  if (position < 0) {\n    output = -position;\n  }\n\n  return output;\n};\n\nconst flip = function ({\n  offset,\n  size,\n  anchorSize,\n  viewPortSize,\n  anchorAlignPoint,\n  elementAlignPoint,\n  margin\n}) {\n  let output = 0;\n  const isPositionCentered = elementAlignPoint === alignPoint.center || elementAlignPoint === alignPoint.middle;\n  const isOriginCentered = anchorAlignPoint === alignPoint.center || anchorAlignPoint === alignPoint.middle;\n  const marginToAdd = 2 * margin; //2x to keep margin after flip\n\n  if (elementAlignPoint !== anchorAlignPoint && !isPositionCentered && !isOriginCentered) {\n    const isBeforeAnchor = anchorAlignPoint === alignPoint.top || anchorAlignPoint === alignPoint.left;\n\n    if (offset < 0 && isBeforeAnchor) {\n      output = size + anchorSize + marginToAdd;\n\n      if (offset + output + size > viewPortSize) {\n        output = 0; //skip flip\n      }\n    } else if (offset >= 0 && !isBeforeAnchor) {\n      if (offset + size > viewPortSize) {\n        output += -(anchorSize + size + marginToAdd);\n      }\n\n      if (offset + output < 0) {\n        output = 0; //skip flip\n      }\n    }\n  }\n\n  return output;\n};\n\nconst restrictToView = options => {\n  const {\n    anchorRect,\n    anchorAlign,\n    elementRect,\n    elementAlign,\n    collisions,\n    viewPort,\n    margin = {}\n  } = options;\n  const {\n    top: elementTop,\n    left: elementLeft,\n    height: elementHeight,\n    width: elementWidth\n  } = elementRect;\n  const {\n    height: viewPortHeight,\n    width: viewPortWidth\n  } = viewPort;\n  const horizontalMargin = margin.horizontal || 0;\n  const verticalMargin = margin.vertical || 0;\n  let left = 0;\n  let top = 0;\n  const isHorizontalFlip = collisions.horizontal === collision.flip;\n  const isVerticalFlip = collisions.vertical === collision.flip;\n\n  if (collisions.vertical === collision.fit) {\n    top += fit(elementTop, elementHeight, viewPortHeight);\n  }\n\n  if (collisions.horizontal === collision.fit) {\n    left += fit(elementLeft, elementWidth, viewPortWidth);\n  }\n\n  if (isVerticalFlip) {\n    top += flip({\n      margin: verticalMargin,\n      offset: elementTop,\n      size: elementHeight,\n      anchorSize: anchorRect.height,\n      viewPortSize: viewPortHeight,\n      anchorAlignPoint: anchorAlign.vertical,\n      elementAlignPoint: elementAlign.vertical\n    });\n  }\n\n  if (isHorizontalFlip) {\n    left += flip({\n      margin: horizontalMargin,\n      offset: elementLeft,\n      size: elementWidth,\n      anchorSize: anchorRect.width,\n      viewPortSize: viewPortWidth,\n      anchorAlignPoint: anchorAlign.horizontal,\n      elementAlignPoint: elementAlign.horizontal\n    });\n  }\n\n  const flippedHorizontal = isHorizontalFlip && left !== 0;\n  const flippedVertical = isVerticalFlip && top !== 0;\n  return {\n    flipped: flippedHorizontal || flippedVertical,\n    flip: {\n      horizontal: flippedHorizontal,\n      vertical: flippedVertical\n    },\n    offset: {\n      left: left,\n      top: top\n    }\n  };\n};\n\nexport default restrictToView;","map":null,"metadata":{},"sourceType":"module"}